using Core.Models.Vulnerabilities;
using Infrastructure.Clients.Interface;
using Infrastructure.Handlers.Interface;
using Infrastructure.Models.GithubVulnerabilities;
using Infrastructure.Provider.Interface;
using Microsoft.Extensions.Logging;

namespace Infrastructure.Provider;

public class GitHubVulnerabilityProvider : IVulnerabilityProvider
{
    private readonly IGithubGraphQLClient _githubGraphQLClient;
    private readonly IProcessVulnerabilityHandler _processVulnerabilityHandler;
    private readonly ILogger<GitHubVulnerabilityProvider> _logger;

    public GitHubVulnerabilityProvider(IGithubGraphQLClient httpClientFactory, IProcessVulnerabilityHandler processVulnerabilityHandler, ILogger<GitHubVulnerabilityProvider> logger)
    {
        _githubGraphQLClient = httpClientFactory;
        _processVulnerabilityHandler = processVulnerabilityHandler;
        _logger = logger;
    }

    #region Public Methods

    public async Task<IReadOnlyCollection<VulnerablePackage>> GetVulnerabilitiesAsync(string ecosystem, IReadOnlyDictionary<string, string> packages)
    {
        List<VulnerablePackage> vulnerablePackages = new List<VulnerablePackage>();

        foreach(var(packageName, version) in packages)
        {
            try
            {
                IReadOnlyCollection<Vulnerability> vulnerabilities = await GetPackageVulnerabilitiesAsync(packageName, ecosystem, version);

                if (vulnerabilities.Any())
                {
                    vulnerablePackages.Add(new VulnerablePackage
                    {
                        Name = packageName,
                        Version = version,
                        Vulnerabilities = vulnerabilities
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting vulnerabilities for package {PackageName}", packageName);
                // Continue with other packages
            }
        }

        return vulnerablePackages;
    }

    #endregion

    #region Private Methods

    private async Task<IReadOnlyCollection<Vulnerability>> GetPackageVulnerabilitiesAsync(string packageName, string ecosystem, string version)
    {
        GitHubGraphQLResponse? githubResponse = await _githubGraphQLClient.QueryVulnerabilitiesAsync(packageName, ecosystem);
        List<VulnerabilityNode>? githubNodes = githubResponse?.Data?.SecurityVulnerabilities?.Nodes;

        if (githubNodes == null)
        {
            return new List<Vulnerability>();
        }

        return _processVulnerabilityHandler.ProcessVulnerabilityNodes(githubNodes, version);
    }

    #endregion
}

