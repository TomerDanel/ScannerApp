using Core.Models.Vulnerabilities;
using Infrastructure.Facade.Interface;
using Infrastructure.Handlers.Interface;
using Infrastructure.Models.GithubVulnerabilities;

namespace Infrastructure.Handlers
{
    public class ProcessVulnerabilityHandler : IProcessVulnerabilityHandler
    {
        private readonly IPackageVersionComparator _packageVersionComparator;

        public ProcessVulnerabilityHandler(IPackageVersionComparator packageVersionComparator)
        {
            _packageVersionComparator = packageVersionComparator;
        }


        public IReadOnlyCollection<Vulnerability> ProcessVulnerabilityNodes(IReadOnlyCollection<VulnerabilityNode> nodes, string version)
        {
            List<Vulnerability> vulnerabilities = new List<Vulnerability>();

            foreach (VulnerabilityNode node in nodes)
            {
                if (_packageVersionComparator.IsVersionVulnerable(version, node.VulnerableVersionRange))
                {
                    vulnerabilities.Add(CreateVulnerabilityFromNode(node));
                }
            }

            return vulnerabilities;
        }

        private Vulnerability CreateVulnerabilityFromNode(VulnerabilityNode node)
        {
            return new Vulnerability
            {
                Summary = node.Advisory?.Summary ?? "No summary available",
                Severity = node.Severity?.ToUpperInvariant() ?? "UNKNOWN",
                FirstPatchedVersion = node.FirstPatchedVersion?.Identifier
            };
        }
    }
}
